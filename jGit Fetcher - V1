To connect to a Git repository and fetch files programmatically in Java, you can use the JGit library, an open-source, Java-based Git library provided by the Eclipse Foundation.

Here’s a simple example of how to do this:

project-root/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           └── gitfetcher/
│   │   │               └── GitRepositoryFetcher.java
│   │   └── resources/
│   └── test/
│       ├── java/
│       └── resources/
├── pom.xml  # Maven configuration file
└── README.md

	1.	Add JGit to your project dependencies. If you’re using Maven, add the following to your pom.xml:


<dependency>
    <groupId>org.eclipse.jgit</groupId>
    <artifactId>org.eclipse.jgit</artifactId>
    <version>6.3.0.202209071007-r</version>
</dependency>


2.	Use the following code to clone a repository and fetch files:

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import java.io.File;

public class GitRepositoryFetcher {
    public static void main(String[] args) {
        String repoUrl = "https://github.com/user/repository.git"; // Replace with your repository URL
        String localRepoPath = "path/to/local/folder";             // Replace with your local path
        String username = "your-username";                         // Replace with your GitHub username
        String token = "your-personal-access-token";               // Replace with your GitHub token

 // Retrieve credentials from environment variables or use default values
//        String username = System.getenv().getOrDefault("GIT_USERNAME", "default-username");
//        String token = System.getenv().getOrDefault("GIT_TOKEN", "default-token");


        try {
            // Clone the repository with authentication
            Git git = Git.cloneRepository()
                    .setURI(repoUrl)
                    .setDirectory(new File(localRepoPath))
                    .setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, token))
                    .call();
            System.out.println("Repository cloned to " + localRepoPath);

            // Fetch files (optional if just cloning)
            git.fetch()
               .setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, token))
               .call();
            System.out.println("Fetched latest files from remote repository");

            git.close();
        } catch (GitAPIException e) {
            e.printStackTrace();
        }
    }
}

Explanation

	1.	Repository URL (repoUrl): Replace with the URL of the repository you want to clone.
	2.	Local Directory (localRepoPath): Replace with the path where you want to clone the repository.
	3.	Credentials:
	•	Username: Set your GitHub username.
	•	Token: Set your GitHub Personal Access Token (PAT). This replaces the password for GitHub’s API.

Security Tip

For security, avoid hardcoding sensitive data directly in your code. Instead, consider using environment variables or a secure secrets management solution to store your credentials. For instance:


String username = System.getenv("GIT_USERNAME");
String token = System.getenv("GIT_TOKEN");

Explanation

	1.	Environment Variables:
	•	System.getenv().getOrDefault("GIT_USERNAME", "default-username") checks for an environment variable called GIT_USERNAME.
	•	If it’s set, it uses that value; otherwise, it falls back to "default-username".
Similarly, GIT_TOKEN is checked and defaults to "default-token" if not found.
	2.	Setting Environment Variables (Locally):
	•	In Unix-based systems (Linux, macOS), set variables in your terminal:


export GIT_USERNAME="your-username"
export GIT_TOKEN="your-token"

In Windows, set variables in the command prompt:

setx GIT_USERNAME "your-username"
setx GIT_TOKEN "your-token"


------------------------------------------------------------------------------------------------------------------------

To search for the Git repository URL within a project directory and then clone it, you can write a Java program to:

	1.	Traverse the project directory for a file (e.g., config.properties or .git/config) that contains the repository URL.
	2.	Extract the URL from this file.
	3.	Use the URL to clone or fetch the repository.

Here’s an example of how to achieve this:

Java Code Example

This program will:

	•	Search the directory for a specific file (config.properties or .git/config).
	•	Read the URL from this file.
	•	Clone or fetch the repository using JGit.

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class GitRepositorySearcher {
    public static void main(String[] args) {
        String projectRootPath = "path/to/your/project"; // Path to your local project folder
        String localRepoPath = "path/to/clone/repo";     // Where you want to clone the repo

        // Credentials (from environment or default values)
        String username = System.getenv().getOrDefault("GIT_USERNAME", "default-username");
        String token = System.getenv().getOrDefault("GIT_TOKEN", "default-token");

        try {
            // Step 1: Search for the repository URL
            String repoUrl = findRepositoryUrl(new File(projectRootPath));
            if (repoUrl != null) {
                System.out.println("Found repository URL: " + repoUrl);

                // Step 2: Clone or fetch the repository
                Git git = Git.cloneRepository()
                        .setURI(repoUrl)
                        .setDirectory(new File(localRepoPath))
                        .setCredentialsProvider(new UsernamePasswordCredentialsProvider(username, token))
                        .call();

                System.out.println("Repository cloned to " + localRepoPath);
                git.close();
            } else {
                System.out.println("Repository URL not found in the project.");
            }
        } catch (IOException | GitAPIException e) {
            e.printStackTrace();
        }
    }

    // Searches for the repository URL in known files
    public static String findRepositoryUrl(File projectRoot) throws IOException {
        File configFile = new File(projectRoot, "config.properties"); // Look in config.properties first
        if (configFile.exists()) {
            return extractUrlFromFile(configFile);
        }

        // Check .git/config as a fallback if config.properties isn't present
        File gitConfigFile = new File(projectRoot, ".git/config");
        if (gitConfigFile.exists()) {
            return extractUrlFromFile(gitConfigFile);
        }
        
        return null;
    }

    // Extracts the repository URL from a file
    public static String extractUrlFromFile(File file) throws IOException {
        Pattern urlPattern = Pattern.compile("https?://[\\w\\.-]+(?:/|\\w)*\\.git"); // Regex for a URL ending with .git
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Matcher matcher = urlPattern.matcher(line);
                if (matcher.find()) {
                    return matcher.group();
                }
            }
        }
        return null;
    }
}


Explanation

	1.	projectRootPath: The local project path to search for the repository URL.
	2.	findRepositoryUrl(): Searches for the repository URL within config.properties or .git/config files.
	3.	extractUrlFromFile(): Reads through the file to find a URL matching the pattern ending in .git.
	4.	Cloning the Repository: Uses the URL to clone the repository with authentication, if required.

Environment Variables for Security

Store sensitive data like GIT_USERNAME and GIT_TOKEN as environment variables. The program will look up these variables and use default placeholders if not found.

This approach allows flexibility in handling repository URLs and cloning them dynamically from the project setup.


------------------------------------------------------------------------------------------------------------------------

f SSH is configured for accessing the Git repository, the approach will differ slightly since SSH keys handle authentication instead of a username and token. With JGit, SSH authentication can be set up using an SshSessionFactory that loads the SSH private key.

Here’s how to adjust the Java program to handle SSH-based authentication.

Steps for SSH Authentication

	1.	Ensure that SSH keys are already configured on the machine and added to the SSH agent.
	2.	Use JschConfigSessionFactory from JGit to manage the SSH session and load the private key.
	3.	Adjust the code to handle an SSH-based repository URL.

Updated Java Code Example with SSH

This example uses SshSessionFactory to set up SSH configuration for JGit.


import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.JschConfigSessionFactory;
import org.eclipse.jgit.transport.SshSessionFactory;
import org.eclipse.jgit.util.FS;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class GitRepositorySSHFetcher {
    public static void main(String[] args) {
        String projectRootPath = "path/to/your/project"; // Path to your local project folder
        String localRepoPath = "path/to/clone/repo";     // Where you want to clone the repo

        try {
            // Step 1: Search for the repository URL
            String repoUrl = findRepositoryUrl(new File(projectRootPath));
            if (repoUrl != null && repoUrl.startsWith("git@")) { // Check if SSH URL
                System.out.println("Found SSH repository URL: " + repoUrl);

                // Step 2: Configure SSH session
                SshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {
                    @Override
                    protected void configure(com.jcraft.jsch.OpenSSHConfig.Host hc, Session session) {
                        session.setConfig("StrictHostKeyChecking", "no");
                    }

                    @Override
                    protected JSch createDefaultJSch(FS fs) throws JSchException {
                        JSch jsch = super.createDefaultJSch(fs);
                        // Load SSH key from default location (~/.ssh/id_rsa or configured location)
                        jsch.addIdentity(System.getProperty("user.home") + "/.ssh/id_rsa");
                        return jsch;
                    }
                };
                SshSessionFactory.setInstance(sshSessionFactory);

                // Step 3: Clone or fetch the repository using SSH
                Git git = Git.cloneRepository()
                        .setURI(repoUrl)
                        .setDirectory(new File(localRepoPath))
                        .setTransportConfigCallback(transport -> 
                                transport.setSshSessionFactory(sshSessionFactory))
                        .call();

                System.out.println("Repository cloned to " + localRepoPath);
                git.close();
            } else {
                System.out.println("No SSH repository URL found in the project.");
            }
        } catch (IOException | GitAPIException e) {
            e.printStackTrace();
        }
    }

    // Searches for the repository URL in known files
    public static String findRepositoryUrl(File projectRoot) throws IOException {
        File configFile = new File(projectRoot, "config.properties"); // Look in config.properties first
        if (configFile.exists()) {
            return extractUrlFromFile(configFile);
        }

        // Check .git/config as a fallback if config.properties isn't present
        File gitConfigFile = new File(projectRoot, ".git/config");
        if (gitConfigFile.exists()) {
            return extractUrlFromFile(gitConfigFile);
        }
        
        return null;
    }

    // Extracts the repository URL from a file
    public static String extractUrlFromFile(File file) throws IOException {
        Pattern urlPattern = Pattern.compile("(git@|https?://)[\\w\\.-]+:(?:/|\\w)*\\.git"); // Regex for SSH or HTTPS URL
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Matcher matcher = urlPattern.matcher(line);
                if (matcher.find()) {
                    return matcher.group();
                }
            }
        }
        return null;
    }
}



Explanation

	1.	SSH Configuration with JschConfigSessionFactory:
	•	The custom JschConfigSessionFactory loads the SSH private key (typically located at ~/.ssh/id_rsa).
	•	You can customize the path if needed or add additional configurations for SSH.
	2.	Checking for SSH URL:
	•	The program verifies that the URL starts with git@ (SSH) to differentiate from HTTPS URLs.
	3.	Cloning with SSH:
	•	The .setTransportConfigCallback() method allows setting the SSH session factory, enabling JGit to connect via SSH.

Notes

	•	This code assumes the SSH key has no passphrase, or that an SSH agent is managing the key. If a passphrase is required, you’ll need additional handling for passphrase input.
	•	Make sure your SSH key has access permissions for the Git repository.

This setup allows JGit to securely connect to Git repositories over ------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------


Using JGit to download a specific folder directly without cloning the entire repository is not directly supported since JGit, like Git itself, doesn’t natively support partial cloning or sparse checkouts. However, you can approximate this by:
	1.	Using the GitHub API or a similar endpoint to list files in a folder: This is necessary because JGit lacks native support for fetching individual files.
	2.	Fetching the contents of each file in the folder: Using JGit, you can connect to the repository, and read blobs directly from the Git tree without performing a full clone.

Here’s a way to download a specific folder by combining JGit for reading file blobs with the GitHub API for listing files.

Java Program Example with JGit and GitHub API

This approach:
	1.	Lists files in a specific folder of a repository using the GitHub API.
	2.	Downloads each file’s content using JGit’s tree reading capabilities.

Before running the code, add the JGit library to your project. If using Maven, add this dependency:

<dependency>
    <groupId>org.eclipse.jgit</groupId>
    <artifactId>org.eclipse.jgit</artifactId>
    <version>6.3.0.202209071007-r</version>
</dependency>


import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.TreeWalk;
import org.eclipse.jgit.api.errors.GitAPIException;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;
import org.json.JSONArray;
import org.json.JSONObject;

public class GitHubFolderDownloader {
    private static final String GITHUB_API_URL = "https://api.github.com/repos/";

    public static void main(String[] args) throws IOException, GitAPIException {
        String repoOwner = "user";
        String repoName = "repository";
        String folderPath = "path/to/folder";   // Path within the repo
        String branch = "main";                 // Branch to access
        String token = "your_github_token";     // GitHub token for private repos

        // Step 1: Get the list of files in the folder
        JSONArray filesList = getFilesListFromGitHub(repoOwner, repoName, folderPath, branch, token);
        if (filesList == null) {
            System.out.println("Failed to retrieve file list.");
            return;
        }

        // Step 2: Use JGit to fetch each file's content and save locally
        try (Repository repository = new FileRepositoryBuilder()
                .setGitDir(new File(".git"))  // Temporary local repository
                .build()) {

            Git git = new Git(repository);
            RevCommit latestCommit = git.log().setMaxCount(1).call().iterator().next();
            RevTree tree = latestCommit.getTree();

            for (int i = 0; i < filesList.length(); i++) {
                JSONObject fileInfo = filesList.getJSONObject(i);
                String filePath = fileInfo.getString("path");
                downloadFile(repository, tree, filePath);
            }
        }
    }

    private static JSONArray getFilesListFromGitHub(String owner, String repo, String folderPath, String branch, String token) {
        try {
            String apiUrl = GITHUB_API_URL + owner + "/" + repo + "/contents/" + folderPath + "?ref=" + branch;
            HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();
            connection.setRequestProperty("Authorization", "Bearer " + token);
            connection.setRequestMethod("GET");

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();
                return new JSONArray(response.toString());
            } else {
                System.out.println("Failed to fetch file list, response code: " + responseCode);
                return null;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private static void downloadFile(Repository repository, RevTree tree, String filePath) throws IOException {
        try (TreeWalk treeWalk = TreeWalk.forPath(repository, filePath, tree)) {
            if (treeWalk != null) {
                ObjectId objectId = treeWalk.getObjectId(0);
                ObjectLoader loader = repository.open(objectId);

                // Save file to local directory
                File file = new File("local/downloaded/" + filePath);
                file.getParentFile().mkdirs();  // Ensure the directory exists
                try (OutputStream out = new FileOutputStream(file)) {
                    loader.copyTo(out);
                }
                System.out.println("Downloaded: " + filePath);
            } else {
                System.out.println("File not found in tree: " + filePath);
            }
        }
    }
}

Explanation

	1.	getFilesListFromGitHub: Uses the GitHub API to get a list of files in the specified folder path.
	•	This method sends a GET request to GitHub’s contents endpoint for a given folder, using a personal access token (required for private repositories).
	•	The response is a JSON array of file metadata, including file paths.
	2.	JGit Repository Setup:
	•	Opens a temporary .git directory using FileRepositoryBuilder, allowing JGit to interact with the repository.
	3.	Download Each File:
	•	TreeWalk and ObjectLoader are used to read each file’s blob based on the file path.
	•	Each file is saved to a local directory, maintaining the folder structure from the repository.

Important Notes

	•	GitHub Token: Use a personal access token if the repository is private. Set this up as an environment variable or securely manage it.
	•	Temporary .git Directory: This example assumes a temporary .git directory is initialized in the local working directory. Adjust the path or repository setup as necessary.
	•	Permissions: Ensure that the GitHub token has appropriate repository read permissions.

This approach allows you to retrieve individual files from a specific folder in a Git repository without performing a full clone, using JGit to access file blobs.



--------------xml


import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.TreeWalk;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;

public class GitHubFolderDownloaderXML {
    private static final String GITHUB_API_URL = "https://api.github.com/repos/";

    public static void main(String[] args) throws IOException, GitAPIException {
        String repoOwner = "user";
        String repoName = "repository";
        String folderPath = "path/to/folder";   // Path within the repo
        String branch = "main";                 // Branch to access
        String token = "your_github_token";     // GitHub token for private repos

        // Step 1: Get the list of files in the folder
        NodeList filesList = getFilesListFromGitHubXML(repoOwner, repoName, folderPath, branch, token);
        if (filesList == null) {
            System.out.println("Failed to retrieve file list.");
            return;
        }

        // Step 2: Use JGit to fetch each file's content and save locally
        try (Repository repository = new FileRepositoryBuilder()
                .setGitDir(new File(".git"))  // Temporary local repository
                .build()) {

            Git git = new Git(repository);
            RevCommit latestCommit = git.log().setMaxCount(1).call().iterator().next();
            RevTree tree = latestCommit.getTree();

            for (int i = 0; i < filesList.getLength(); i++) {
                String filePath = filesList.item(i).getTextContent();
                downloadFile(repository, tree, filePath);
            }
        }
    }

    private static NodeList getFilesListFromGitHubXML(String owner, String repo, String folderPath, String branch, String token) {
        try {
            String apiUrl = GITHUB_API_URL + owner + "/" + repo + "/contents/" + folderPath + "?ref=" + branch;
            HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();
            connection.setRequestProperty("Authorization", "Bearer " + token);
            connection.setRequestMethod("GET");

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Parse XML response
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                Document document = builder.parse(connection.getInputStream());

                // Use XPath to extract file paths
                XPath xPath = XPathFactory.newInstance().newXPath();
                return (NodeList) xPath.evaluate("//path", document, XPathConstants.NODESET); // Adjust "path" based on XML structure
            } else {
                System.out.println("Failed to fetch file list, response code: " + responseCode);
                return null;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    private static void downloadFile(Repository repository, RevTree tree, String filePath) throws IOException {
        try (TreeWalk treeWalk = TreeWalk.forPath(repository, filePath, tree)) {
            if (treeWalk != null) {
                ObjectId objectId = treeWalk.getObjectId(0);
                ObjectLoader loader = repository.open(objectId);

                // Save file to local directory
                File file = new File("local/downloaded/" + filePath);
                file.getParentFile().mkdirs();  // Ensure the directory exists
                try (OutputStream out = new FileOutputStream(file)) {
                    loader.copyTo(out);
                }
                System.out.println("Downloaded: " + filePath);
            } else {
                System.out.println("File not found in tree: " + filePath);
            }
        }
    }
}


------------------


Java Code to Download Only src/testfolder Using JGit


import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectLoader;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevTree;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.treewalk.TreeWalk;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

public class GitFolderDownloader {
    public static void main(String[] args) {
        String repoUrl = "https://github.com/user/repository.git"; // Replace with your repository URL
        String branch = "main";                                   // Branch to access
        String folderPath = "src/testfolder";                     // Folder path within the repository
        String localRepoPath = "/path/to/temp/repo";              // Temporary path for the repository
        String localSavePath = "/path/to/save/folder";            // Path to save downloaded files locally

        try {
            // Step 1: Clone the repository in a shallow manner to minimize data usage
            File localRepoDir = new File(localRepoPath);
            if (!localRepoDir.exists()) localRepoDir.mkdirs();
            Git git = Git.cloneRepository()
                    .setURI(repoUrl)
                    .setDirectory(localRepoDir)
                    .setBranch(branch)
                    .setDepth(1)  // Shallow clone with depth 1
                    .call();

            // Step 2: Open the cloned repository
            try (Repository repository = new FileRepositoryBuilder()
                    .setGitDir(new File(localRepoPath + "/.git"))
                    .build()) {

                // Step 3: Get the latest commit and its tree
                ObjectId lastCommitId = repository.resolve("refs/heads/" + branch);
                RevCommit commit = git.getRepository().parseCommit(lastCommitId);
                RevTree tree = commit.getTree();

                // Step 4: Traverse the tree to find `src/testfolder`
                try (TreeWalk treeWalk = new TreeWalk(repository)) {
                    treeWalk.addTree(tree);
                    treeWalk.setRecursive(true);
                    treeWalk.setFilter(PathFilter.create(folderPath));

                    while (treeWalk.next()) {
                        // Step 5: For each file in the folder, download the content
                        String filePath = treeWalk.getPathString();
                        ObjectId objectId = treeWalk.getObjectId(0);
                        ObjectLoader loader = repository.open(objectId);

                        // Step 6: Save the file locally
                        File targetFile = new File(localSavePath, filePath);
                        targetFile.getParentFile().mkdirs();  // Ensure directory exists

                        try (OutputStream out = new FileOutputStream(targetFile)) {
                            loader.copyTo(out);
                        }
                        System.out.println("Downloaded: " + filePath);
                    }
                }
            }
        } catch (GitAPIException | IOException e) {
            e.printStackTrace();
        }
    }
}


