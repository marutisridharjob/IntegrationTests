Below is an example of a simple Spring Boot project that saves data into a DB2 table:

1. Create the Spring Boot Project

Use Spring Initializr to generate a Spring Boot project:
	•	Dependencies:
	•	Spring Web
	•	Spring Data JPA
	•	DB2 Driver
	•	Spring Boot DevTools (optional)


2. application.properties

Configure your DB2 database connection in src/main/resources/application.properties:


# DB2 Database Configuration
spring.datasource.url=jdbc:db2://<db-host>:<db-port>/<db-name>
spring.datasource.username=<db-username>
spring.datasource.password=<db-password>
spring.datasource.driver-class-name=com.ibm.db2.jcc.DB2Driver

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.DB2Dialect
spring.jpa.hibernate.ddl-auto=update

Replace <db-host>, <db-port>, <db-name>, <db-username>, and <db-password> with your DB2 instance details.

3. Entity Class

Create an entity that maps to your DB2 table (e.g., Person):


package com.example.db2demo.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Person {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private int age;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}


4. Repository

Create a repository interface for CRUD operations:


package com.example.db2demo.repository;

import com.example.db2demo.entity.Person;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PersonRepository extends JpaRepository<Person, Long> {
}


5. Controller

Create a REST controller to handle requests:

package com.example.db2demo.controller;

import com.example.db2demo.entity.Person;
import com.example.db2demo.repository.PersonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/persons")
public class PersonController {

    @Autowired
    private PersonRepository personRepository;

    // Save a new person
    @PostMapping
    public Person createPerson(@RequestBody Person person) {
        return personRepository.save(person);
    }

    // Get all persons
    @GetMapping
    public List<Person> getAllPersons() {
        return personRepository.findAll();
    }
}


6. Main Application

Your main application class (Db2DemoApplication.java):


package com.example.db2demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Db2DemoApplication {

    public static void main(String[] args) {
        SpringApplication.run(Db2DemoApplication.class, args);
    }
}


7. Create the DB2 Table

Make sure your DB2 table exists, or let Hibernate create it for you. If you’re creating it manually:


CREATE TABLE PERSON (
    ID BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR(100),
    AGE INT
);


8. Run the Application

	1.	Start the application:

mvn spring-boot:run


	2.	Use a tool like Postman or curl to test:
	•	Save a person:


curl -X POST http://localhost:8080/api/persons \
-H "Content-Type: application/json" \
-d '{"name":"John Doe","age":30}'



	•	Get all persons:

curl http://localhost:8080/api/persons

9. Expected Result

	•	The POST request saves a new record in the PERSON table.
	•	The GET request retrieves all records from the table.

This project demonstrates a simple setup for saving data into a DB2 table using Spring Boot and JPA. Let me know if you need additional features!



